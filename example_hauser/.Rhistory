## Check diagnostics ----
check_hmc_diagnostics(fit_sim)
stan_trace(fit_sim,pars=c("beta","gamma","phi"),inc_warmup=TRUE)
ggsave(file="trace_theta_sim.pdf",width=7,height=2.5)
stan_dens(fit_sim,pars=c("beta","recovery_time","phi_inv","R0","gamma","phi"),separate_chains = TRUE)
ggsave(file="post_theta_sim.pdf",width=7,height=5)
## Posterior predictive check ----
summary(fit_sim,pars="pred_cases")[[1]] %>%
as.data.frame() %>%
bind_cols(cases=input_data$cases,
trueprev=sim_cases$value,
date=input_data$ts) %>%
ggplot() +
geom_ribbon(aes(x=date,ymin=`2.5%`,ymax=`97.5%`),alpha=.5,fill="darkcyan") +
geom_line(aes(x=date,y=`50%`)) +
geom_line(aes(x=date,y=trueprev),colour="firebrick",size=1,linetype=2) +
geom_point(aes(x=date,y=input_data_sim$cases),shape=21,size=2.3) +
labs(x="Date",y="Number of students in bed")
ggsave(file="inbed_fit_sim.pdf",width=4,height=3)
## Show results ----
print(fit_sim,pars=c("beta","gamma","phi","R0","recovery_time"))
set.seed(2)
pars = c(beta = 1.2,
gamma = 0.5,
phi=15
)
## Set initial values
N_0 = 763
I_0 = 1
inits = c(
S = N_0 - I_0,
I = I_0,
R = 0
)
## Set model
seir = function(t, x, parms, ...) {
with(as.list(c(parms, x)), {
dS = - beta*S*I/(S+I+R)
dI = beta*S*I/(S+I+R) - gamma*I
dR = gamma*I
list(c(dS, dI, dR))
})
}
## Simulate
times = seq(0,14,by=1)
sim_data = ode(inits, times, seir, pars)
tibble(sim_data)
## Add noise
sim_data %<>%
as.data.frame() %>%
pivot_longer(2:4) %>%
mutate(name=factor(name,levels=c("S","I","R"),labels=c("S(t)","I(t)","R(t)")))
ggplot(sim_data) +
geom_line(aes(x=time,y=value,color=name),size=1) +
scale_color_manual(values=c("chartreuse4","firebrick","steelblue")) +
labs(x="Time",y="Volume",color=NULL) +
theme(legend.position = c(.7,.8),
legend.background = element_blank())
ggsave(file="example_sir1.pdf",width=4,height=2.6)
# Add noise
sim_cases = sim_data %>%
filter(time>0,name=="I(t)") %>%
mutate(obs_I=rnbinom(14,mu=value,size=pars["phi"]))
ggplot(sim_cases) +
geom_line(aes(x=time,y=value),colour="firebrick",size=1) +
geom_point(aes(x=time,y=obs_I),shape=21,size=2.3) +
labs(x="Date",y="Number of students in bed")
set.seed(2)
pars = c(beta = 2,
gamma = 0.5,
phi=15
)
## Set initial values
N_0 = 763
I_0 = 1
inits = c(
S = N_0 - I_0,
I = I_0,
R = 0
)
## Set model
seir = function(t, x, parms, ...) {
with(as.list(c(parms, x)), {
dS = - beta*S*I/(S+I+R)
dI = beta*S*I/(S+I+R) - gamma*I
dR = gamma*I
list(c(dS, dI, dR))
})
}
## Simulate
times = seq(0,14,by=1)
sim_data = ode(inits, times, seir, pars)
tibble(sim_data)
## Add noise
sim_data %<>%
as.data.frame() %>%
pivot_longer(2:4) %>%
mutate(name=factor(name,levels=c("S","I","R"),labels=c("S(t)","I(t)","R(t)")))
ggplot(sim_data) +
geom_line(aes(x=time,y=value,color=name),size=1) +
scale_color_manual(values=c("chartreuse4","firebrick","steelblue")) +
labs(x="Time",y="Volume",color=NULL) +
theme(legend.position = c(.7,.8),
legend.background = element_blank())
ggsave(file="example_sir1.pdf",width=4,height=2.6)
# Add noise
sim_cases = sim_data %>%
filter(time>0,name=="I(t)") %>%
mutate(obs_I=rnbinom(14,mu=value,size=pars["phi"]))
ggplot(sim_cases) +
geom_line(aes(x=time,y=value),colour="firebrick",size=1) +
geom_point(aes(x=time,y=obs_I),shape=21,size=2.3) +
labs(x="Date",y="Number of students in bed")
set.seed(2)
pars = c(beta = 2,
gamma = 0.5,
phi=15
)
## Set initial values
N_0 = 763
I_0 = 1
inits = c(
S = N_0 - I_0,
I = I_0,
R = 0
)
## Set model
seir = function(t, x, parms, ...) {
with(as.list(c(parms, x)), {
dS = - beta*S*I/(S+I+R)
dI = beta*S*I/(S+I+R) - gamma*I
dR = gamma*I
list(c(dS, dI, dR))
})
}
## Simulate
times = seq(0,14,by=1)
sim_data = ode(inits, times, seir, pars)
tibble(sim_data)
## Add noise
sim_data %<>%
as.data.frame() %>%
pivot_longer(2:4) %>%
mutate(name=factor(name,levels=c("S","I","R"),labels=c("S(t)","I(t)","R(t)")))
ggplot(sim_data) +
geom_line(aes(x=time,y=value,color=name),size=1) +
scale_color_manual(values=c("chartreuse4","firebrick","steelblue")) +
labs(x="Time",y="Volume",color=NULL) +
theme(legend.position = c(.7,.8),
legend.background = element_blank())
ggsave(file="example_sir1.pdf",width=4,height=2.6)
# Add noise
sim_cases = sim_data %>%
filter(time>0,name=="I(t)") %>%
mutate(obs_I=rnbinom(14,mu=value,size=pars["phi"]))
ggplot(sim_cases) +
geom_line(aes(x=time,y=value),colour="firebrick",size=1) +
geom_point(aes(x=time,y=obs_I),shape=21,size=2.3) +
labs(x="Date",y="Number of students in bed")
# format sim data
cases = sim_cases$obs_I
n_days = 14
t0 = 0
t = 1:n_days
# initial conditions
i0 = 1
s0 = N - i0
r0 = 0
y0 = c(s0, i0, r0)
# put into list
input_data_sim = list(T = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases, switch_likelihood = 1)
## Sample ----
fit_sim = stan(file='sir_negbin.stan',
data=input_data_sim,
chains=4,
iter=1000)
## Check diagnostics ----
check_hmc_diagnostics(fit_sim)
stan_trace(fit_sim,pars=c("beta","gamma","phi"),inc_warmup=TRUE)
ggsave(file="trace_theta_sim.pdf",width=7,height=2.5)
stan_dens(fit_sim,pars=c("beta","recovery_time","phi_inv","R0","gamma","phi"),separate_chains = TRUE)
ggsave(file="post_theta_sim.pdf",width=7,height=5)
## Posterior predictive check ----
summary(fit_sim,pars="pred_cases")[[1]] %>%
as.data.frame() %>%
bind_cols(cases=input_data$cases,
trueprev=sim_cases$value,
date=input_data$ts) %>%
ggplot() +
geom_ribbon(aes(x=date,ymin=`2.5%`,ymax=`97.5%`),alpha=.5,fill="darkcyan") +
geom_line(aes(x=date,y=`50%`)) +
geom_line(aes(x=date,y=trueprev),colour="firebrick",size=1,linetype=2) +
geom_point(aes(x=date,y=input_data_sim$cases),shape=21,size=2.3) +
labs(x="Date",y="Number of students in bed")
ggsave(file="inbed_fit_sim.pdf",width=4,height=3)
## Show results ----
print(fit_sim,pars=c("beta","gamma","phi","R0","recovery_time"))
## Check diagnostics ----
check_hmc_diagnostics(fit_sim)
stan_trace(fit_sim,pars=c("beta","gamma","phi"),inc_warmup=TRUE)
pars
ppars = data.frame(pars=names(pars),
trueval=pars)
ppars
stan_trace(fit_sim,pars=c("beta","gamma","phi"),inc_warmup=TRUE) +
geom_vline(data=ppars,aes(xintercept=trueval))
stan_dens(fit_sim,pars=c("beta","recovery_time","phi_inv","R0","gamma","phi"),separate_chains = TRUE) +
geom_vline(data=ppars,aes(xintercept=trueval))
stan_dens(fit_sim,pars=c("beta","gamma","phi"),separate_chains = TRUE) +
geom_vline(data=ppars,aes(xintercept=trueval))
stan_dens
stan_dens(fit_sim,pars=c("beta","gamma","phi"),separate_chains = TRUE) +
geom_vline(data=ppars,aes(xintercept=trueval),colour="firebrick",linetype=2)
ppars = data.frame(parameter=names(pars),
trueval=pars)
stan_dens(fit_sim,pars=c("beta","gamma","phi"),separate_chains = TRUE) +
geom_vline(data=ppars,aes(xintercept=trueval),colour="firebrick",linetype=2)
ggsave(file="post_theta_sim.pdf",width=7,height=5)
## Posterior predictive check ----
summary(fit_sim,pars="pred_cases")[[1]] %>%
as.data.frame() %>%
bind_cols(cases=input_data$cases,
trueprev=sim_cases$value,
date=input_data$ts) %>%
ggplot() +
geom_ribbon(aes(x=date,ymin=`2.5%`,ymax=`97.5%`),alpha=.5,fill="darkcyan") +
geom_line(aes(x=date,y=`50%`)) +
geom_line(aes(x=date,y=trueprev),colour="firebrick",size=1,linetype=2) +
geom_point(aes(x=date,y=input_data_sim$cases),shape=21,size=2.3) +
labs(x="Date",y="Number of students in bed")
ggsave(file="inbed_fit_sim.pdf",width=4,height=3)
## Show results ----
print(fit_sim,pars=c("beta","gamma","phi","R0","recovery_time"))
ggplot(sim_data) +
geom_line(aes(x=time,y=value,color=name),size=1) +
scale_color_manual(values=c("chartreuse4","firebrick","steelblue")) +
labs(x="Time",y="Volume",color=NULL) +
theme(legend.position = c(.9,.5),
legend.background = element_blank())
ggsave(file="example_sir1.pdf",width=4,height=2.6)
ggplot(sim_cases) +
geom_line(aes(x=time,y=value),colour="firebrick",size=1) +
geom_point(aes(x=time,y=obs_I),shape=21,size=2.3) +
labs(x="Date",y="Number of students in bed")
ggplot(sim_cases) +
geom_line(aes(x=time,y=value),colour="firebrick",size=1) +
geom_point(aes(x=time,y=obs_I),shape=21,size=2.3,colour="firebrick") +
labs(x="Date",y="Number of students in bed")
ggplot(sim_cases) +
geom_line(aes(x=time,y=value),colour="firebrick",size=1) +
geom_point(aes(x=time,y=obs_I),shape=21,size=2.3,colour="firebrick",fill="white") +
labs(x="Date",y="Number of students in bed")
ggsave(file="example_sir2.pdf",width=4,height=2.6)
stan_dens(fit_sim,pars=c("beta","gamma","phi"),separate_chains = TRUE) +
geom_vline(data=ppars,aes(xintercept=trueval),colour="firebrick",linetype=2)
stan_trace(fit_sim,pars=c("beta","gamma","phi"),inc_warmup=TRUE) +
geom_hline(data=ppars,aes(yintercept=trueval),colour="firebrick",linetype=2)
stan_trace(fit_sim,pars=c("beta","gamma","phi"),inc_warmup=TRUE) +
geom_hline(data=ppars,aes(yintercept=trueval),colour="firebrick",linetype=2,size=3)
stan_trace(fit_sim,pars=c("beta","gamma","phi"),inc_warmup=TRUE) +
geom_hline(data=ppars,aes(yintercept=trueval),colour="firebrick",linetype=2,size=2)
ggsave(file="trace_theta_sim.pdf",width=7,height=2.5)
stan_dens(fit_sim,pars=c("beta","gamma","phi"),separate_chains = TRUE) +
geom_vline(data=ppars,aes(xintercept=trueval),colour="firebrick",linetype=2)
ggsave(file="post_theta_sim.pdf",width=7,height=5)
stan_trace(fit_sim,pars=c("beta","gamma","phi"),inc_warmup=TRUE) +
geom_hline(data=ppars,aes(yintercept=trueval),colour="firebrick",linetype=2)
ggsave(file="trace_theta_sim.pdf",width=7,height=2.5)
stan_dens(fit_sim,pars=c("beta","gamma","phi"),separate_chains = TRUE) +
geom_vline(data=ppars,aes(xintercept=trueval),colour="firebrick",linetype=2)
stan_dens(fit_sim,pars=c("beta","gamma","phi"),separate_chains = TRUE) +
geom_vline(data=ppars,aes(xintercept=trueval),colour="firebrick",linetype=2)
ggsave(file="post_theta_sim.pdf",width=7,height=2.5)
## Posterior predictive check ----
summary(fit_sim,pars="pred_cases")[[1]] %>%
as.data.frame() %>%
bind_cols(cases=input_data$cases,
trueprev=sim_cases$value,
date=input_data$ts) %>%
ggplot() +
geom_ribbon(aes(x=date,ymin=`2.5%`,ymax=`97.5%`),alpha=.5,fill="darkcyan") +
geom_line(aes(x=date,y=`50%`)) +
geom_line(aes(x=date,y=trueprev),colour="firebrick",size=1,linetype=2) +
geom_point(aes(x=date,y=input_data_sim$cases),shape=21,size=2.3) +
labs(x="Date",y="Number of students in bed")
ggsave(file="inbed_fit_sim.pdf",width=4,height=3)
setwd("/home/julien/cloud/cours/bayesian_workflow_sir/example_hauser/")
logfunc = function(t,tc,eta,nu,xi) eta + (1-\eta)/(1+exp(xi*(t-t_c-nu)))
logfunc = function(t,tc,eta,nu,xi) eta + (1-eta)/(1+exp(xi*(t-t_c-nu)))
tc = 10
eta = 0.2
nu = 3
xi = 0.5
t = sea(0,20,by=.1)
t = seq(0,20,by=.1)
tibble(t=seq(0,20,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi))
logfunc = function(t,tc,eta,nu,xi) eta + (1-eta)/(1+exp(xi*(t-tc-nu)))
tc = 10
eta = 0.2
nu = 3
xi = 0.5
tibble(t=seq(0,20,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi))
tibble(t=seq(0,20,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f))
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f))
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f)) +
scale_y_continuous(limits=c(0,1),labels=scales::percent)
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f)) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f),colour="orange") +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f),colour="orange",size=1) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc.pdf",width=3,height=2.3)
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f),colour="orange") +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc.pdf",width=3,height=2.3)
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f),colour="orange",size=.8) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc.pdf",width=3,height=2.3)
eta = 0.25
nu = 3
xi = 0.5
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f),colour="orange",size=.8) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc.pdf",width=3,height=2.3)
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(aes(x=t,y=f),colour="orange",size=.8) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc.pdf",width=3,height=2.3)
base = tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi))
ggplot(base) +
geom_line(aes(x=t,y=f),colour="orange",size=.8) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc1.pdf",width=3,height=2.3)
tc = 10
eta = 0.25
nu = 3
xi = 0.5
base = tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi))
ggplot(base) +
geom_line(aes(x=t,y=f),colour="orange",size=.8) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc1.pdf",width=3,height=2.3)
tc = 10
eta = 0.5
nu = 3
xi = 0.5
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(data=base,aes(x=t,y=f),colour="orange",size=.8) +
geom_line(aes(x=t,y=f),colour="orange",size=.8,linetype=2) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc2.pdf",width=3,height=2.3)
nu = 5
tc = 10
eta = 0.25
nu = 5
xi = 0.5
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(data=base,aes(x=t,y=f),colour="orange",size=.8) +
geom_line(aes(x=t,y=f),colour="orange",size=.8,linetype=2) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
tc = 10
eta = 0.25
nu = 3
xi = 1
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(data=base,aes(x=t,y=f),colour="orange",size=.8) +
geom_line(aes(x=t,y=f),colour="orange",size=.8,linetype=2) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
tc = 10
eta = 0.25
nu = 3
xi = 0.5
base = tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi))
ggplot(base) +
geom_line(aes(x=t,y=f),colour="orange",size=.8) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc1.pdf",width=3,height=2.3)
tc = 10
eta = 0.5
nu = 3
xi = 0.5
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(data=base,aes(x=t,y=f),colour="orange",size=.8) +
geom_line(aes(x=t,y=f),colour="orange",size=.8,linetype=2) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc2.pdf",width=3,height=2.3)
tc = 10
eta = 0.25
nu = 6
xi = 0.5
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(data=base,aes(x=t,y=f),colour="orange",size=.8) +
geom_line(aes(x=t,y=f),colour="orange",size=.8,linetype=2) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc3.pdf",width=3,height=2.3)
tc = 10
eta = 0.25
nu = 3
xi = 1
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(data=base,aes(x=t,y=f),colour="orange",size=.8) +
geom_line(aes(x=t,y=f),colour="orange",size=.8,linetype=2) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc4.pdf",width=3,height=2.3)
tc = 10
eta = 0.25
nu = 8
xi = 0.5
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(data=base,aes(x=t,y=f),colour="orange",size=.8) +
geom_line(aes(x=t,y=f),colour="orange",size=.8,linetype=2) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc3.pdf",width=3,height=2.3)
xi = 1.5
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(data=base,aes(x=t,y=f),colour="orange",size=.8) +
geom_line(aes(x=t,y=f),colour="orange",size=.8,linetype=2) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
tc = 10
eta = 0.25
nu = 3
xi = 1.5
tibble(t=seq(0,30,by=.1)) %>%
mutate(f=logfunc(t,tc,eta,nu,xi)) %>%
ggplot() +
geom_line(data=base,aes(x=t,y=f),colour="orange",size=.8) +
geom_line(aes(x=t,y=f),colour="orange",size=.8,linetype=2) +
geom_vline(xintercept=tc,linetype=2) +
scale_y_continuous(limits=c(0,1),labels=scales::percent) +
labs(x="t",y="f(t)")
ggsave("example_logfunc4.pdf",width=3,height=2.3)
